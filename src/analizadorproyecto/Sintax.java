
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorproyecto;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\011\000\002\003" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\003\000\002\007\005\000\002\007\005\000\002\007" +
    "\007\000\002\007\011\000\002\007\007\000\002\007\007" +
    "\000\002\007\011\000\002\014\005\000\002\004\004\000" +
    "\002\004\005\000\002\004\007\000\002\004\011\000\002" +
    "\004\011\000\002\004\005\000\002\004\007\000\002\004" +
    "\011\000\002\004\005\000\002\004\007\000\002\004\011" +
    "\000\002\004\005\000\002\004\007\000\002\005\003\000" +
    "\002\005\003\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\012\006\000\002\012\010\000\002\012" +
    "\004\000\002\012\003\000\002\013\007\000\002\013\006" +
    "\000\002\013\005\000\002\006\011\000\002\011\015\000" +
    "\002\010\012\000\002\010\011\000\002\010\015" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\027\004\001\002\000\004\032\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\015\010\001\002\000\004\016\011\001\002\000" +
    "\004\017\012\001\002\000\032\004\022\005\036\006\034" +
    "\007\015\011\031\013\033\024\032\025\013\026\021\034" +
    "\014\036\025\040\020\001\002\000\004\015\170\001\002" +
    "\000\004\037\162\001\002\000\004\026\152\001\002\000" +
    "\030\004\022\005\036\006\034\007\015\011\031\013\033" +
    "\020\151\024\032\025\013\026\072\034\014\001\002\000" +
    "\030\004\ufffe\005\ufffe\006\ufffe\007\ufffe\011\ufffe\013\ufffe" +
    "\020\ufffe\024\ufffe\025\ufffe\026\ufffe\034\ufffe\001\002\000" +
    "\034\004\uffdf\005\uffdf\006\uffdf\007\uffdf\011\uffdf\013\uffdf" +
    "\016\uffdf\020\uffdf\022\uffdf\024\uffdf\025\uffdf\026\uffdf\034" +
    "\uffdf\001\002\000\010\014\077\036\057\037\076\001\002" +
    "\000\004\026\134\001\002\000\030\004\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\011\ufffa\013\ufffa\020\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\034\ufffa\001\002\000\030\004\ufff8\005\ufff8\006" +
    "\ufff8\007\ufff8\011\ufff8\013\ufff8\020\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\034\ufff8\001\002\000\034\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\011\uffde\013\uffde\016\uffde\020\uffde\022\uffde" +
    "\024\uffde\025\uffde\026\uffde\034\uffde\001\002\000\030\004" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\011\ufff6\013\ufff6\020\ufff6" +
    "\024\ufff6\025\ufff6\026\ufff6\034\ufff6\001\002\000\030\004" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\011\ufff5\013\ufff5\020\ufff5" +
    "\024\ufff5\025\ufff5\026\ufff5\034\ufff5\001\002\000\030\004" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\011\ufffc\013\ufffc\020\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\034\ufffc\001\002\000\004\015" +
    "\122\001\002\000\004\017\110\001\002\000\004\015\054" +
    "\001\002\000\004\026\044\001\002\000\030\004\ufffd\005" +
    "\ufffd\006\ufffd\007\ufffd\011\ufffd\013\ufffd\020\ufffd\024\ufffd" +
    "\025\ufffd\026\ufffd\034\ufffd\001\002\000\004\026\037\001" +
    "\002\000\006\014\041\022\040\001\002\000\032\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\011\uffe1\013\uffe1\020\uffe1\022" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\034\uffe1\001\002\000\004" +
    "\040\042\001\002\000\004\022\043\001\002\000\032\004" +
    "\uffe0\005\uffe0\006\uffe0\007\uffe0\011\uffe0\013\uffe0\020\uffe0" +
    "\022\uffe0\024\uffe0\025\uffe0\026\uffe0\034\uffe0\001\002\000" +
    "\006\014\046\022\045\001\002\000\032\004\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\011\uffe4\013\uffe4\020\uffe4\022\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\034\uffe4\001\002\000\004\026\047" +
    "\001\002\000\006\022\050\037\051\001\002\000\032\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\011\uffe3\013\uffe3\020\uffe3" +
    "\022\uffe3\024\uffe3\025\uffe3\026\uffe3\034\uffe3\001\002\000" +
    "\004\026\052\001\002\000\004\022\053\001\002\000\032" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\011\uffe2\013\uffe2\020" +
    "\uffe2\022\uffe2\024\uffe2\025\uffe2\026\uffe2\034\uffe2\001\002" +
    "\000\010\026\056\036\025\040\020\001\002\000\004\016" +
    "\063\001\002\000\004\036\057\001\002\000\010\026\062" +
    "\034\060\040\061\001\002\000\034\004\uffdc\005\uffdc\006" +
    "\uffdc\007\uffdc\011\uffdc\013\uffdc\016\uffdc\020\uffdc\022\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\034\uffdc\001\002\000\034\004" +
    "\uffdd\005\uffdd\006\uffdd\007\uffdd\011\uffdd\013\uffdd\016\uffdd" +
    "\020\uffdd\022\uffdd\024\uffdd\025\uffdd\026\uffdd\034\uffdd\001" +
    "\002\000\034\004\uffdb\005\uffdb\006\uffdb\007\uffdb\011\uffdb" +
    "\013\uffdb\016\uffdb\020\uffdb\022\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\034\uffdb\001\002\000\004\017\064\001\002\000\032" +
    "\004\022\005\036\006\034\007\015\011\031\013\033\024" +
    "\032\025\013\026\021\034\014\036\025\040\020\001\002" +
    "\000\030\004\022\005\036\006\034\007\015\011\031\013" +
    "\033\020\071\024\032\025\013\026\072\034\014\001\002" +
    "\000\030\004\uffff\005\uffff\006\uffff\007\uffff\011\uffff\013" +
    "\uffff\020\uffff\024\uffff\025\uffff\026\uffff\034\uffff\001\002" +
    "\000\030\004\ufff9\005\ufff9\006\ufff9\007\ufff9\011\ufff9\013" +
    "\ufff9\020\ufff9\024\ufff9\025\ufff9\026\ufff9\034\ufff9\001\002" +
    "\000\030\004\ufffb\005\ufffb\006\ufffb\007\ufffb\011\ufffb\013" +
    "\ufffb\020\ufffb\024\ufffb\025\ufffb\026\ufffb\034\ufffb\001\002" +
    "\000\030\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\013" +
    "\uffd0\020\uffd0\024\uffd0\025\uffd0\026\uffd0\034\uffd0\001\002" +
    "\000\006\014\077\037\076\001\002\000\030\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\011\ufff7\013\ufff7\020\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\034\ufff7\001\002\000\004\022\075\001" +
    "\002\000\030\004\uffed\005\uffed\006\uffed\007\uffed\011\uffed" +
    "\013\uffed\020\uffed\024\uffed\025\uffed\026\uffed\034\uffed\001" +
    "\002\000\006\026\101\034\100\001\002\000\032\004\uffec" +
    "\005\uffec\006\uffec\007\uffec\011\uffec\013\uffec\020\uffec\022" +
    "\uffec\024\uffec\025\uffec\026\uffec\034\uffec\001\002\000\004" +
    "\037\106\001\002\000\036\004\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\011\ufff4\013\ufff4\016\ufff4\020\ufff4\022\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\034\ufff4\037\102\001\002\000\004\026" +
    "\103\001\002\000\036\004\ufff0\005\ufff0\006\ufff0\007\ufff0" +
    "\011\ufff0\013\ufff0\016\ufff0\020\ufff0\022\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\034\ufff0\037\104\001\002\000\004\026\105" +
    "\001\002\000\034\004\uffee\005\uffee\006\uffee\007\uffee\011" +
    "\uffee\013\uffee\016\uffee\020\uffee\022\uffee\024\uffee\025\uffee" +
    "\026\uffee\034\uffee\001\002\000\004\034\107\001\002\000" +
    "\034\004\uffef\005\uffef\006\uffef\007\uffef\011\uffef\013\uffef" +
    "\016\uffef\020\uffef\022\uffef\024\uffef\025\uffef\026\uffef\034" +
    "\uffef\001\002\000\032\004\022\005\036\006\034\007\015" +
    "\011\031\013\033\024\032\025\013\026\021\034\014\036" +
    "\025\040\020\001\002\000\030\004\022\005\036\006\034" +
    "\007\015\011\031\013\033\020\112\024\032\025\013\026" +
    "\072\034\014\001\002\000\004\013\113\001\002\000\004" +
    "\015\114\001\002\000\010\026\056\036\025\040\020\001" +
    "\002\000\004\016\116\001\002\000\004\017\117\001\002" +
    "\000\032\004\022\005\036\006\034\007\015\011\031\013" +
    "\033\024\032\025\013\026\021\034\014\036\025\040\020" +
    "\001\002\000\030\004\022\005\036\006\034\007\015\011" +
    "\031\013\033\020\121\024\032\025\013\026\072\034\014" +
    "\001\002\000\030\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011" +
    "\uffcf\013\uffcf\020\uffcf\024\uffcf\025\uffcf\026\uffcf\034\uffcf" +
    "\001\002\000\010\026\056\036\025\040\020\001\002\000" +
    "\004\016\124\001\002\000\004\017\125\001\002\000\032" +
    "\004\022\005\036\006\034\007\015\011\031\013\033\024" +
    "\032\025\013\026\021\034\014\036\025\040\020\001\002" +
    "\000\030\004\022\005\036\006\034\007\015\011\031\013" +
    "\033\020\127\024\032\025\013\026\072\034\014\001\002" +
    "\000\032\004\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3\012" +
    "\130\013\uffd3\020\uffd3\024\uffd3\025\uffd3\026\uffd3\034\uffd3" +
    "\001\002\000\004\017\131\001\002\000\032\004\022\005" +
    "\036\006\034\007\015\011\031\013\033\024\032\025\013" +
    "\026\021\034\014\036\025\040\020\001\002\000\030\004" +
    "\022\005\036\006\034\007\015\011\031\013\033\020\133" +
    "\024\032\025\013\026\072\034\014\001\002\000\030\004" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2\013\uffd2\020\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\034\uffd2\001\002\000\010\014" +
    "\137\022\135\037\136\001\002\000\032\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\011\uffeb\013\uffeb\020\uffeb\022\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\034\uffeb\001\002\000\004\034\145" +
    "\001\002\000\004\034\140\001\002\000\006\022\142\037" +
    "\141\001\002\000\004\034\143\001\002\000\032\004\uffea" +
    "\005\uffea\006\uffea\007\uffea\011\uffea\013\uffea\020\uffea\022" +
    "\uffea\024\uffea\025\uffea\026\uffea\034\uffea\001\002\000\004" +
    "\022\144\001\002\000\032\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\011\uffe9\013\uffe9\020\uffe9\022\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\034\uffe9\001\002\000\004\037\146\001\002\000" +
    "\004\034\147\001\002\000\004\022\150\001\002\000\032" +
    "\004\uffe8\005\uffe8\006\uffe8\007\uffe8\011\uffe8\013\uffe8\020" +
    "\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\034\uffe8\001\002" +
    "\000\004\002\000\001\002\000\006\014\154\022\153\001" +
    "\002\000\032\004\uffe7\005\uffe7\006\uffe7\007\uffe7\011\uffe7" +
    "\013\uffe7\020\uffe7\022\uffe7\024\uffe7\025\uffe7\026\uffe7\034" +
    "\uffe7\001\002\000\004\034\155\001\002\000\006\022\156" +
    "\037\157\001\002\000\032\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\011\uffe6\013\uffe6\020\uffe6\022\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\034\uffe6\001\002\000\004\034\160\001\002\000" +
    "\004\022\161\001\002\000\032\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\011\uffe5\013\uffe5\020\uffe5\022\uffe5\024\uffe5\025" +
    "\uffe5\026\uffe5\034\uffe5\001\002\000\004\034\163\001\002" +
    "\000\036\004\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3\013" +
    "\ufff3\016\ufff3\020\ufff3\022\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\034\ufff3\037\164\001\002\000\004\034\165\001\002\000" +
    "\036\004\ufff2\005\ufff2\006\ufff2\007\ufff2\011\ufff2\013\ufff2" +
    "\016\ufff2\020\ufff2\022\ufff2\024\ufff2\025\ufff2\026\ufff2\034" +
    "\ufff2\037\166\001\002\000\004\034\167\001\002\000\034" +
    "\004\ufff1\005\ufff1\006\ufff1\007\ufff1\011\ufff1\013\ufff1\016" +
    "\ufff1\020\ufff1\022\ufff1\024\ufff1\025\ufff1\026\ufff1\034\ufff1" +
    "\001\002\000\006\004\173\041\172\001\002\000\022\004" +
    "\022\005\036\006\034\007\015\026\206\034\014\036\025" +
    "\040\020\001\002\000\004\026\202\001\002\000\004\026" +
    "\174\001\002\000\006\014\176\041\175\001\002\000\004" +
    "\022\201\001\002\000\004\034\177\001\002\000\004\022" +
    "\200\001\002\000\022\004\uffd6\005\uffd6\006\uffd6\007\uffd6" +
    "\026\uffd6\034\uffd6\036\uffd6\040\uffd6\001\002\000\022\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\026\uffd5\034\uffd5\036\uffd5" +
    "\040\uffd5\001\002\000\004\022\203\001\002\000\022\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\026\uffd4\034\uffd4\036\uffd4" +
    "\040\uffd4\001\002\000\004\016\222\001\002\000\004\022" +
    "\215\001\002\000\012\014\077\036\057\037\076\041\214" +
    "\001\002\000\004\022\211\001\002\000\004\016\uffd7\001" +
    "\002\000\004\026\212\001\002\000\004\041\213\001\002" +
    "\000\004\016\uffda\001\002\000\004\016\uffd8\001\002\000" +
    "\010\026\056\036\025\040\020\001\002\000\004\022\217" +
    "\001\002\000\004\026\220\001\002\000\004\041\221\001" +
    "\002\000\004\016\uffd9\001\002\000\004\017\223\001\002" +
    "\000\032\004\022\005\036\006\034\007\015\011\031\013" +
    "\033\024\032\025\013\026\021\034\014\036\025\040\020" +
    "\001\002\000\030\004\022\005\036\006\034\007\015\011" +
    "\031\013\033\020\225\024\032\025\013\026\072\034\014" +
    "\001\002\000\030\004\uffd1\005\uffd1\006\uffd1\007\uffd1\011" +
    "\uffd1\013\uffd1\020\uffd1\024\uffd1\025\uffd1\026\uffd1\034\uffd1" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\015\004\016\005" +
    "\026\006\022\007\034\010\025\011\023\014\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\065\006\067\007\073\010\072\011\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\064\004\016" +
    "\005\026\006\022\007\034\010\025\011\023\014\027\001" +
    "\001\000\014\004\065\006\067\007\073\010\072\011\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\110" +
    "\004\016\005\026\006\022\007\034\010\025\011\023\014" +
    "\027\001\001\000\014\004\065\006\067\007\073\010\072" +
    "\011\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\117\004\016\005\026\006\022\007\034\010" +
    "\025\011\023\014\027\001\001\000\014\004\065\006\067" +
    "\007\073\010\072\011\066\001\001\000\002\001\001\000" +
    "\004\005\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\125\004\016\005\026\006\022\007\034\010" +
    "\025\011\023\014\027\001\001\000\014\004\065\006\067" +
    "\007\073\010\072\011\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\131\004\016\005\026\006\022" +
    "\007\034\010\025\011\023\014\027\001\001\000\014\004" +
    "\065\006\067\007\073\010\072\011\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\170\001\001\000\012\004\204\005\206\007\207\012\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\223\004\016\005\026\006\022\007\034\010" +
    "\025\011\023\014\027\001\001\000\014\004\065\006\067" +
    "\007\073\010\072\011\066\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){
    this.s = s;
}
    public Symbol getS(){
    return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Public Void Parentesis_abierta Parentesis_cerrada LlaveAbierta SENTENCIA LlaveCerrada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= EXPRESION_COMPLETA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA CICLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= CICLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRESION ::= Identificador Op_aritmeticos Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRESION ::= Numero Op_aritmeticos Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRESION ::= Numero Op_aritmeticos Numero Op_aritmeticos Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRESION ::= Numero Op_aritmeticos Numero Op_aritmeticos Numero Op_aritmeticos Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESION ::= Identificador Op_aritmeticos Identificador Op_aritmeticos Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESION ::= Identificador Op_aritmeticos Numero Op_aritmeticos Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESION ::= Identificador Op_aritmeticos Identificador Op_aritmeticos Identificador Op_aritmeticos Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION_COMPLETA ::= SENTENCIA EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_COMPLETA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Identificador Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Int Identificador Igual Numero Op_aritmeticos Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Int Identificador Op_aritmeticos Numero Op_aritmeticos Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Float Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Float Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Float Identificador Igual Numero Op_aritmeticos Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= String Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= String Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= String Identificador Igual Identificador Op_aritmeticos Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Boolean Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Boolean Identificador Igual Op_booleano P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA_BOOLEANA ::= Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_FOR ::= SENTENCIA_BOOLEANA P_coma Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_FOR ::= DECLARACION P_coma SENTENCIA_BOOLEANA P_coma Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_FOR ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_FOR ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_FOR ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION_FOR ::= Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF ::= If Parentesis_abierta SENTENCIA_BOOLEANA Parentesis_cerrada LlaveAbierta SENTENCIA LlaveCerrada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF_ELSE ::= If Parentesis_abierta SENTENCIA_BOOLEANA Parentesis_cerrada LlaveAbierta SENTENCIA LlaveCerrada Else LlaveAbierta SENTENCIA LlaveCerrada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CICLO ::= For Parentesis_abierta DECLARACION_FOR SENTENCIA_FOR Parentesis_cerrada LlaveAbierta SENTENCIA LlaveCerrada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CICLO ::= While Parentesis_abierta SENTENCIA_BOOLEANA Parentesis_cerrada LlaveAbierta SENTENCIA LlaveCerrada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CICLO ::= Do LlaveAbierta SENTENCIA LlaveCerrada While Parentesis_abierta SENTENCIA_BOOLEANA Parentesis_cerrada LlaveAbierta SENTENCIA LlaveCerrada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
